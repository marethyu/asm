x86 Assembly Guide

Fundamental types:

byte: 8 bits
word: 16 bits
double word (dword): 32 bits
quad word (qword): 64 bits
double quad word: 128 bits

Register set (64 bit version):

R0   R1   R2   R3   R4   R5   R6   R7   R8   R9   R10   R11   R12   R13   R14   R15
RAX  RCX  RDX  RBX  RSP  RBP  RSI  RDI

The first eight registers have alternate names.

Register set (32 bit version) (lower 32 bits of 64 bit registers):

R0D  R1D  R2D  R3D  R4D  R5D  R6D  R7D  R8D  R9D  R10D  R11D  R12D  R13D  R14D  R15D
EAX  ECX  EDX  EBX  ESP  EBP  ESI  EDI

Register set (16 bit version) (lower 16 bits of 32 bit registers):

R0W  R1W  R2W  R3W  R4W  R5W  R6W  R7W  R8W  R9W  R10W  R11W  R12W  R13W  R14W  R15W
AX   CX   DX   BX   SP   BP   SI   DI

Register set (8 bit version) (lower 8 bits of 16 bit registers):

R0B  R1B  R2B  R3B  R4B  R5B  R6B  R7B  R8B  R9B  R10B  R11B  R12B  R13B  R14B  R15B
AL   CL   DL   BL   SPL  BPL  SIL  DIL

Register set (8 bit version) (upper 8 bits of 16 bit registers):

AH   CH   DH   BH

XMM register set (typically used for floating point arithmetic):

XMM0 XMM1 XMM2 XMM3 XMM4 XMM5 XMM6 XMM7 XMM8 XMM9 XMM10 XMM11 XMM12 XMM13 XMM14 XMM15

Things need to know about registers:
SP = stack pointer
BP = base pointer
AX = accumulator (often used for storing results of arithmetic operations)
BX = base register (often used for indexed addressing)
CX = counter (often used for loop indexing)
DX = data register (often used for IO operations; it's also used along with AX register for multiplication and division involving large values)
SI = source index (for string operations)
DI = destination index (for string operations)

Terminology:
callee saved registers = non-violate (non-forgettery) registers (these registers have same content before and after calls)
caller saved registers = violate (forgettery) registers (these registers might have different content after calls)

Register conventions (might be different for different platforms):
rax - return value (when calling syscall, put syscall number in this register)
rbx - callee saved
rcx - arg4
rdx - arg3
rsi - arg2
rdi - arg1
rsp - stack pointer
rbp - callee saved
r8 - arg5
r9 - arg6
r10 - caller saved
r11 - caller saved
r12 - callee saved
r13 - callee saved
r14 - callee saved
r15 - callee saved

The only registers that the called function is required to preserve (the calle-save registers) are: rbp, rbx, r12, r13, r14, r15. All others are free to be changed by the called function.

Details here: https://i.stack.imgur.com/WgcQv.png, https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm

Basic instructions to know:
adc = Integer addition with carry
add = Integer addition
and = Bitwise AND
bs[f|r] = Bit scan forward, bit scan reverse
b[t|tr|ts] = Bit test; Bit test and reset; Bit test and set
call = Call procedure
cld = Clear direction flag (RFLAGS.DF)
cmovcc = Conditional move
cmp = Compare operands
cmps[b|w|d|q] = Compare string operands
cupid = Query CPU identification and feature information
c[wd|dq|do] = Convert operand
dec = Decrement operand by 1
div = Unsigned integer division
idiv = Signed integer division
imul = Signed integer multiplication
inc = Increment operand by 1
jcc = Conditional jump
jmp = Unconditional jump
lahf = Load status flags into register AH
lea = Load effective address
lods[b|w|d|q] = Load string operand
mov = Move data
mov[sx|sxd] = Move integer with sign extension
movzx = Move integer with zero extension
mul = Unsigned integer multiplication
neg = Two’s complement negation
not = One’s complement negation
or = Bitwise inclusive OR
pop = Pop top-of-stack value to operand
popfq = Pop top-of-stack value to RFLAGS
push = Push operand onto stack
pushfq = Push RFLAGS onto stack
rc[l|r] = Rotate left with RFLAGS.CF; Rotate right with RFLAGS.CF
ret = Return from procedure
re[p|pe|pz|pne|pnz] = Repeat string operation (instruction prefix)
ro[l|r] = Rotate left; Rotate right
sahf = Store AH into status flags
sar = Shift arithmetic right
setcc = Set byte on condition
sh[l|r] = Shift logical left; Shift logical right
sbb = Integer subtraction with borrow
std = Set direction flag (RFLAGS.DF)
stos[b|w|d|q] = Store string value
test = Test operand (sets status flags)
xchg = Exchange source and destination operand values
xor = Bitwise exclusive OR

Books:
Modern x86 Assembly Programming by Daniel Kusswurm

TODO:
https://www.reddit.com/r/asm/comments/i8h3m8/need_a_little_help_with_asm_its_basic_but_still_i/
https://stackoverflow.com/questions/8006711/whats-the-difference-between-equ-and-db-in-nasm
https://stackoverflow.com/questions/8858104/64bit-nasm-division-idiv
https://stackoverflow.com/questions/51564308/nasm-modulo-operation
https://stackoverflow.com/questions/25489192/idiv-operation-in-assembly-understanding
techbeamers.com/c-datatypes/
https://www.cs.uaf.edu/2010/fall/cs301/lecture/10_04_malloc.html
https://stackoverflow.com/questions/4175281/what-does-it-mean-to-align-the-stack
align stack notes
idiv cdq instruction notes
array notes (1d + 2d)
should 2d arrays should be an array of 1d array pointers?
byte[]
word[]
dword[]
qword[]
db
dw
resb
equ
dq
